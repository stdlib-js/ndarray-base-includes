{"version":3,"file":"index.mjs","sources":["../lib/nd_accessors.js","../lib/nd_complex.js","../lib/nd.js","../lib/main.js","../lib/0d.js","../lib/1d.js","../lib/2d.js","../lib/3d.js","../lib/4d.js","../lib/5d.js","../lib/6d.js","../lib/7d.js","../lib/8d.js","../lib/9d.js","../lib/10d.js","../lib/0d_accessors.js","../lib/1d_accessors.js","../lib/2d_accessors.js","../lib/3d_accessors.js","../lib/4d_accessors.js","../lib/5d_accessors.js","../lib/6d_accessors.js","../lib/7d_accessors.js","../lib/8d_accessors.js","../lib/9d_accessors.js","../lib/10d_accessors.js","../lib/0d_complex.js","../lib/1d_complex.js","../lib/2d_complex.js","../lib/3d_complex.js","../lib/4d_complex.js","../lib/5d_complex.js","../lib/6d_complex.js","../lib/7d_complex.js","../lib/8d_complex.js","../lib/9d_complex.js","../lib/10d_complex.js","../lib/2d_blocked.js","../lib/3d_blocked.js","../lib/4d_blocked.js","../lib/5d_blocked.js","../lib/6d_blocked.js","../lib/7d_blocked.js","../lib/8d_blocked.js","../lib/9d_blocked.js","../lib/10d_blocked.js","../lib/2d_blocked_accessors.js","../lib/3d_blocked_accessors.js","../lib/4d_blocked_accessors.js","../lib/5d_blocked_accessors.js","../lib/6d_blocked_accessors.js","../lib/7d_blocked_accessors.js","../lib/8d_blocked_accessors.js","../lib/9d_blocked_accessors.js","../lib/10d_blocked_accessors.js","../lib/2d_blocked_complex.js","../lib/3d_blocked_complex.js","../lib/4d_blocked_complex.js","../lib/5d_blocked_complex.js","../lib/6d_blocked_complex.js","../lib/7d_blocked_complex.js","../lib/8d_blocked_complex.js","../lib/9d_blocked_complex.js","../lib/10d_blocked_complex.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = includesnd( x, 6.0 );\n* // returns true\n*\n* out = includesnd( x, 100.0 );\n* // returns false\n*/\nfunction includesnd( x, value ) {\n\tvar xbuf;\n\tvar ordx;\n\tvar len;\n\tvar get;\n\tvar sh;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache a reference to the output ndarray data buffer:\n\txbuf = x.data;\n\n\t// Cache a reference to the stride array:\n\tsx = x.strides;\n\n\t// Cache the index of the first indexed element:\n\tox = x.offset;\n\n\t// Cache the array order:\n\tordx = x.order;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includesnd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = includesnd( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = includesnd( x, v );\n* // returns false\n*/\nfunction includesnd( x, value ) {\n\tvar xbuf;\n\tvar ordx;\n\tvar len;\n\tvar sh;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache a reference to the output ndarray data buffer:\n\txbuf = x.data;\n\n\t// Cache a reference to the stride array:\n\tsx = x.strides;\n\n\t// Cache the index of the first indexed element:\n\tox = x.offset;\n\n\t// Cache the array order:\n\tordx = x.order;\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includesnd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = includesnd( x, 6.0 );\n* // returns true\n*\n* out = includesnd( x, 100.0 );\n* // returns false\n*/\nfunction includesnd( x, value ) {\n\tvar xbuf;\n\tvar ordx;\n\tvar len;\n\tvar sh;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache a reference to the output ndarray data buffer:\n\txbuf = x.data;\n\n\t// Cache a reference to the stride array:\n\tsx = x.strides;\n\n\t// Cache the index of the first indexed element:\n\tox = x.offset;\n\n\t// Cache the array order:\n\tordx = x.order;\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tif ( xbuf[ ix ] === value ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includesnd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isComplexArray from '@stdlib/array-base-assert-is-complex-typed-array';\nimport isBooleanArray from '@stdlib/array-base-assert-is-booleanarray';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport iterationOrder from '@stdlib/ndarray-base-iteration-order';\nimport minmaxViewBufferIndex from '@stdlib/ndarray-base-minmax-view-buffer-index';\nimport ndarray2object from '@stdlib/ndarray-base-ndarraylike2object';\nimport reinterpretComplex from '@stdlib/strided-base-reinterpret-complex';\nimport reinterpretBoolean from '@stdlib/strided-base-reinterpret-boolean';\nimport real from '@stdlib/complex-float64-real';\nimport imag from '@stdlib/complex-float64-imag';\nimport gscal from '@stdlib/blas-base-gscal';\nimport blockedaccessorincludes2d from './2d_blocked_accessors.js';\nimport blockedaccessorincludes3d from './3d_blocked_accessors.js';\nimport blockedaccessorincludes4d from './4d_blocked_accessors.js';\nimport blockedaccessorincludes5d from './5d_blocked_accessors.js';\nimport blockedaccessorincludes6d from './6d_blocked_accessors.js';\nimport blockedaccessorincludes7d from './7d_blocked_accessors.js';\nimport blockedaccessorincludes8d from './8d_blocked_accessors.js';\nimport blockedaccessorincludes9d from './9d_blocked_accessors.js';\nimport blockedaccessorincludes10d from './10d_blocked_accessors.js'; // eslint-disable-line id-length\nimport blockedcomplexincludes2d from './2d_blocked_complex.js';\nimport blockedcomplexincludes3d from './3d_blocked_complex.js';\nimport blockedcomplexincludes4d from './4d_blocked_complex.js';\nimport blockedcomplexincludes5d from './5d_blocked_complex.js';\nimport blockedcomplexincludes6d from './6d_blocked_complex.js';\nimport blockedcomplexincludes7d from './7d_blocked_complex.js';\nimport blockedcomplexincludes8d from './8d_blocked_complex.js';\nimport blockedcomplexincludes9d from './9d_blocked_complex.js';\nimport blockedcomplexincludes10d from './10d_blocked_complex.js';\nimport blockedincludes2d from './2d_blocked.js';\nimport blockedincludes3d from './3d_blocked.js';\nimport blockedincludes4d from './4d_blocked.js';\nimport blockedincludes5d from './5d_blocked.js';\nimport blockedincludes6d from './6d_blocked.js';\nimport blockedincludes7d from './7d_blocked.js';\nimport blockedincludes8d from './8d_blocked.js';\nimport blockedincludes9d from './9d_blocked.js';\nimport blockedincludes10d from './10d_blocked.js';\nimport accessorincludes0d from './0d_accessors.js';\nimport accessorincludes1d from './1d_accessors.js';\nimport accessorincludes2d from './2d_accessors.js';\nimport accessorincludes3d from './3d_accessors.js';\nimport accessorincludes4d from './4d_accessors.js';\nimport accessorincludes5d from './5d_accessors.js';\nimport accessorincludes6d from './6d_accessors.js';\nimport accessorincludes7d from './7d_accessors.js';\nimport accessorincludes8d from './8d_accessors.js';\nimport accessorincludes9d from './9d_accessors.js';\nimport accessorincludes10d from './10d_accessors.js';\nimport accessorincludesnd from './nd_accessors.js';\nimport complexincludes0d from './0d_complex.js';\nimport complexincludes1d from './1d_complex.js';\nimport complexincludes2d from './2d_complex.js';\nimport complexincludes3d from './3d_complex.js';\nimport complexincludes4d from './4d_complex.js';\nimport complexincludes5d from './5d_complex.js';\nimport complexincludes6d from './6d_complex.js';\nimport complexincludes7d from './7d_complex.js';\nimport complexincludes8d from './8d_complex.js';\nimport complexincludes9d from './9d_complex.js';\nimport complexincludes10d from './10d_complex.js';\nimport complexincludesnd from './nd_complex.js';\nimport includes0d from './0d.js';\nimport includes1d from './1d.js';\nimport includes2d from './2d.js';\nimport includes3d from './3d.js';\nimport includes4d from './4d.js';\nimport includes5d from './5d.js';\nimport includes6d from './6d.js';\nimport includes7d from './7d.js';\nimport includes8d from './8d.js';\nimport includes9d from './9d.js';\nimport includes10d from './10d.js';\nimport includesnd from './nd.js';\n\n\n// VARIABLES //\n\nvar INCLUDES = [\n\tincludes0d,\n\tincludes1d,\n\tincludes2d,\n\tincludes3d,\n\tincludes4d,\n\tincludes5d,\n\tincludes6d,\n\tincludes7d,\n\tincludes8d,\n\tincludes9d,\n\tincludes10d\n];\nvar ACCESSOR_INCLUDES = [\n\taccessorincludes0d,\n\taccessorincludes1d,\n\taccessorincludes2d,\n\taccessorincludes3d,\n\taccessorincludes4d,\n\taccessorincludes5d,\n\taccessorincludes6d,\n\taccessorincludes7d,\n\taccessorincludes8d,\n\taccessorincludes9d,\n\taccessorincludes10d\n];\nvar COMPLEX_INCLUDES = [\n\tcomplexincludes0d,\n\tcomplexincludes1d,\n\tcomplexincludes2d,\n\tcomplexincludes3d,\n\tcomplexincludes4d,\n\tcomplexincludes5d,\n\tcomplexincludes6d,\n\tcomplexincludes7d,\n\tcomplexincludes8d,\n\tcomplexincludes9d,\n\tcomplexincludes10d\n];\nvar BLOCKED_INCLUDES = [\n\tblockedincludes2d, // 0\n\tblockedincludes3d,\n\tblockedincludes4d,\n\tblockedincludes5d,\n\tblockedincludes6d,\n\tblockedincludes7d,\n\tblockedincludes8d,\n\tblockedincludes9d,\n\tblockedincludes10d // 8\n];\nvar BLOCKED_ACCESSOR_INCLUDES = [\n\tblockedaccessorincludes2d, // 0\n\tblockedaccessorincludes3d,\n\tblockedaccessorincludes4d,\n\tblockedaccessorincludes5d,\n\tblockedaccessorincludes6d,\n\tblockedaccessorincludes7d,\n\tblockedaccessorincludes8d,\n\tblockedaccessorincludes9d,\n\tblockedaccessorincludes10d // 8\n];\nvar BLOCKED_COMPLEX_INCLUDES = [\n\tblockedcomplexincludes2d, // 0\n\tblockedcomplexincludes3d,\n\tblockedcomplexincludes4d,\n\tblockedcomplexincludes5d,\n\tblockedcomplexincludes6d,\n\tblockedcomplexincludes7d,\n\tblockedcomplexincludes8d,\n\tblockedcomplexincludes9d,\n\tblockedcomplexincludes10d // 8\n];\nvar MAX_DIMS = INCLUDES.length - 1;\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* ## Notes\n*\n* -   A provided ndarray should be an `object` with the following properties:\n*\n*     -   **dtype**: data type.\n*     -   **data**: data buffer.\n*     -   **shape**: dimensions.\n*     -   **strides**: stride lengths.\n*     -   **offset**: index offset.\n*     -   **order**: specifies whether an ndarray is row-major (C-style) or column major (Fortran-style).\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing one input array and a zero-dimensional search element array\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create the search element ndarray-like object:\n* var searchElement = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 2.0 ] ),\n*     'shape': [],\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = includes( [ x, searchElement ] );\n* // returns true\n*/\nfunction includes( arrays ) {\n\tvar isCmplx;\n\tvar value;\n\tvar ndims;\n\tvar xmmv;\n\tvar shx;\n\tvar iox;\n\tvar len;\n\tvar sx;\n\tvar ox;\n\tvar ns;\n\tvar x;\n\tvar d;\n\tvar i;\n\n\t// Unpack the ndarrays and standardize ndarray meta data:\n\tx = ndarray2object( arrays[ 0 ] );\n\tvalue = ndarray2object( arrays[ 1 ] );\n\n\tshx = x.shape;\n\tndims = shx.length;\n\n\t// Resolve the search element as a scalar:\n\tvalue = value.accessors[ 0 ]( value.data, value.offset );\n\n\t// Check for known array types which can be reinterpreted for better iteration performance...\n\tif ( isBooleanArray( x.data ) ) {\n\t\tif ( !isBoolean( value ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tx.data = reinterpretBoolean( x.data, 0 );\n\t\tx.accessorProtocol = false;\n\t} else if ( isComplexArray( x.data ) ) {\n\t\tif ( !isComplexLike( value ) ) {\n\t\t\treturn false;\n\t\t}\n\t\t// TODO: consider adding something like `complex/base/complex2object` where we normalize a user-provided complex-like object to a standardized object shape\n\t\tvalue = {\n\t\t\t're': real( value ),\n\t\t\t'im': imag( value )\n\t\t};\n\t\tx.data = reinterpretComplex( x.data, 0 );\n\t\tx.accessorProtocol = false;\n\t\tx.strides = gscal( ndims, 2, x.strides, 1 );\n\t\tx.offset *= 2;\n\t\tisCmplx = true;\n\t}\n\t// Determine whether we can avoid iteration altogether...\n\tif ( ndims === 0 ) {\n\t\tif ( x.accessorProtocol ) {\n\t\t\treturn ACCESSOR_INCLUDES[ ndims ]( x, value );\n\t\t}\n\t\tif ( isCmplx ) {\n\t\t\treturn COMPLEX_INCLUDES[ ndims ]( x, value );\n\t\t}\n\t\treturn INCLUDES[ ndims ]( x, value );\n\t}\n\t// Compute the number of elements and the number of singleton dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\td = shx[ i ];\n\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= d;\n\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( d === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t}\n\t// Check whether we were provided an empty ndarray...\n\tif ( len === 0 ) {\n\t\treturn true;\n\t}\n\t// Determine whether the ndarray is one-dimensional and thus readily translates to a one-dimensional strided array...\n\tif ( ndims === 1 ) {\n\t\tif ( x.accessorProtocol ) {\n\t\t\treturn ACCESSOR_INCLUDES[ ndims ]( x, value );\n\t\t}\n\t\tif ( isCmplx ) {\n\t\t\treturn COMPLEX_INCLUDES[ ndims ]( x, value );\n\t\t}\n\t\treturn INCLUDES[ ndims ]( x, value );\n\t}\n\tsx = x.strides;\n\n\t// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can treat an ndarray as being equivalent to a one-dimensional strided array...\n\tif ( ns === ndims-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( shx[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tx.shape = [ shx[i] ];\n\t\tx.strides = [ sx[i] ];\n\t\tif ( x.accessorProtocol ) {\n\t\t\treturn ACCESSOR_INCLUDES[ 1 ]( x, value );\n\t\t}\n\t\tif ( isCmplx ) {\n\t\t\treturn COMPLEX_INCLUDES[ 1 ]( x, value );\n\t\t}\n\t\treturn INCLUDES[ 1 ]( x, value );\n\t}\n\tiox = iterationOrder( sx ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tif ( iox !== 0 ) {\n\t\t// Determine the minimum and maximum linear indices which are accessible by the array view:\n\t\txmmv = minmaxViewBufferIndex( shx, sx, x.offset );\n\n\t\t// Determine whether we can ignore shape (and strides) and treat the ndarray as a linear one-dimensional strided array...\n\t\tif ( len === ( xmmv[1]-xmmv[0]+1 ) || ( isCmplx && len*2 === ( xmmv[1]-xmmv[0]+1 ) ) ) { // eslint-disable-line max-len\n\t\t\t// Note: the above is equivalent to @stdlib/ndarray/base/assert/is-contiguous, but in-lined so we can retain computed values...\n\t\t\tif ( iox === 1 ) {\n\t\t\t\tox = xmmv[ 0 ];\n\t\t\t} else {\n\t\t\t\tox = xmmv[ 1 ];\n\t\t\t}\n\t\t\tx.shape = [ len ];\n\t\t\tx.strides = [ ( isCmplx ) ? iox*2 : iox ];\n\t\t\tx.offset = ox;\n\t\t\tif ( x.accessorProtocol ) {\n\t\t\t\treturn ACCESSOR_INCLUDES[ 1 ]( x, value );\n\t\t\t}\n\t\t\tif ( isCmplx ) {\n\t\t\t\treturn COMPLEX_INCLUDES[ 1 ]( x, value );\n\t\t\t}\n\t\t\treturn INCLUDES[ 1 ]( x, value );\n\t\t}\n\t\t// The ndarray is non-contiguous, so we cannot directly use one-dimensional array functionality...\n\n\t\t// Determine whether we can use simple nested loops...\n\t\tif ( ndims <= MAX_DIMS ) {\n\t\t\t// So long as iteration always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\t\tif ( x.accessorProtocol ) {\n\t\t\t\treturn ACCESSOR_INCLUDES[ ndims ]( x, value );\n\t\t\t}\n\t\t\tif ( isCmplx ) {\n\t\t\t\treturn COMPLEX_INCLUDES[ ndims ]( x, value );\n\t\t\t}\n\t\t\treturn INCLUDES[ ndims ]( x, value );\n\t\t}\n\t\t// Fall-through to blocked iteration...\n\t}\n\t// At this point, we're either dealing with a non-contiguous n-dimensional array or a high dimensional n-dimensional array, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( ndims <= MAX_DIMS ) {\n\t\tif ( x.accessorProtocol ) {\n\t\t\treturn BLOCKED_ACCESSOR_INCLUDES[ ndims-2 ]( x, value );\n\t\t}\n\t\tif ( isCmplx ) {\n\t\t\treturn BLOCKED_COMPLEX_INCLUDES[ ndims-2 ]( x, value );\n\t\t}\n\t\treturn BLOCKED_INCLUDES[ ndims-2 ]( x, value );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( x.accessorProtocol ) {\n\t\treturn accessorincludesnd( x, value );\n\t}\n\tif ( isCmplx ) {\n\t\treturn complexincludesnd( x, value );\n\t}\n\treturn includesnd( x, value );\n}\n\n\n// EXPORTS //\n\nexport default includes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = includes0d( x, 2.0 );\n* // returns true\n*\n* out = includes0d( x, 100.0 );\n* // returns false\n*/\nfunction includes0d( x, value ) {\n\treturn ( x.data[ x.offset ] === value );\n}\n\n\n// EXPORTS //\n\nexport default includes0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 4 ];\n*\n* // Define the array strides:\n* var sx = [ 2 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = includes1d( x, 6.0 );\n* // returns true\n*\n* out = includes1d( x, 100.0 );\n* // returns false\n*/\nfunction includes1d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar S0;\n\tvar ix;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments:\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tif ( xbuf[ ix ] === value ) {\n\t\t\treturn true;\n\t\t}\n\t\tix += dx0;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = includes2d( x, 6.0 );\n* // returns true\n*\n* out = includes2d( x, 100.0 );\n* // returns false\n*/\nfunction includes2d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tix += dx0;\n\t\t}\n\t\tix += dx1;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = includes3d( x, 6.0 );\n* // returns true\n*\n* out = includes3d( x, 100.0 );\n* // returns false\n*/\nfunction includes3d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tix += dx0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t}\n\t\tix += dx2;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = includes4d( x, 6.0 );\n* // returns true\n*\n* out = includes4d( x, 100.0 );\n* // returns false\n*/\nfunction includes4d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t}\n\t\tix += dx3;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = includes5d( x, 6.0 );\n* // returns true\n*\n* out = includes5d( x, 100.0 );\n* // returns false\n*/\nfunction includes5d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t}\n\t\tix += dx4;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = includes6d( x, 6.0 );\n* // returns true\n*\n* out = includes6d( x, 100.0 );\n* // returns false\n*/\nfunction includes6d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t}\n\t\tix += dx5;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = includes7d( x, 6.0 );\n* // returns true\n*\n* out = includes7d( x, 100.0 );\n* // returns false\n*/\nfunction includes7d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t}\n\t\tix += dx6;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = includes8d( x, 6.0 );\n* // returns true\n*\n* out = includes8d( x, 100.0 );\n* // returns false\n*/\nfunction includes8d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t}\n\t\tix += dx7;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = includes9d( x, 6.0 );\n* // returns true\n*\n* out = includes9d( x, 100.0 );\n* // returns false\n*/\nfunction includes9d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t}\n\t\tix += dx8;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = includes10d( x, 6.0 );\n* // returns true\n*\n* out = includes10d( x, 100.0 );\n* // returns false\n*/\nfunction includes10d( x, value ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t}\n\t\tix += dx9;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = includes0d( x, 2.0 );\n* // returns true\n*\n* out = includes0d( x, 100.0 );\n* // returns false\n*/\nfunction includes0d( x, value ) {\n\treturn ( x.accessors[ 0 ]( x.data, x.offset ) === value );\n}\n\n\n// EXPORTS //\n\nexport default includes0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 4 ];\n*\n* // Define the array strides:\n* var sx = [ 2 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = includes1d( x, 6.0 );\n* // returns true\n*\n* out = includes1d( x, 100.0 );\n* // returns false\n*/\nfunction includes1d( x, value ) {\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar S0;\n\tvar ix;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\treturn true;\n\t\t}\n\t\tix += dx0;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = includes2d( x, 6.0 );\n* // returns true\n*\n* out = includes2d( x, 100.0 );\n* // returns false\n*/\nfunction includes2d( x, value ) {\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tix += dx0;\n\t\t}\n\t\tix += dx1;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = includes3d( x, 6.0 );\n* // returns true\n*\n* out = includes3d( x, 100.0 );\n* // returns false\n*/\nfunction includes3d( x, value ) {\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tix += dx0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t}\n\t\tix += dx2;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = includes4d( x, 6.0 );\n* // returns true\n*\n* out = includes4d( x, 100.0 );\n* // returns false\n*/\nfunction includes4d( x, value ) {\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t}\n\t\tix += dx3;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = includes5d( x, 6.0 );\n* // returns true\n*\n* out = includes5d( x, 100.0 );\n* // returns false\n*/\nfunction includes5d( x, value ) {\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t}\n\t\tix += dx4;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = includes6d( x, 6.0 );\n* // returns true\n*\n* out = includes6d( x, 100.0 );\n* // returns false\n*/\nfunction includes6d( x, value ) {\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t}\n\t\tix += dx5;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = includes7d( x, 6.0 );\n* // returns true\n*\n* out = includes7d( x, 100.0 );\n* // returns false\n*/\nfunction includes7d( x, value ) {\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t}\n\t\tix += dx6;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 8, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = includes8d( x, 6.0 );\n* // returns true\n*\n* out = includes8d( x, 100.0 );\n* // returns false\n*/\nfunction includes8d( x, value ) {\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t}\n\t\tix += dx7;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 8, 8, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = includes9d( x, 6.0 );\n* // returns true\n*\n* out = includes9d( x, 100.0 );\n* // returns false\n*/\nfunction includes9d( x, value ) {\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t}\n\t\tix += dx8;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 8, 8, 8, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = includes10d( x, 6.0 );\n* // returns true\n*\n* out = includes10d( x, 100.0 );\n* // returns false\n*/\nfunction includes10d( x, value ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tget = x.accessors[ 0 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t}\n\t\tix += dx9;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 1.0,\n*     'im': 2.0\n* };\n* var out = includes0d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = includes0d( x, v );\n* // returns false\n*/\nfunction includes0d( x, value ) {\n\treturn ( x.data[ x.offset ] === value.re && x.data[ x.offset+1 ] === value.im ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default includes0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 4 ];\n*\n* // Define the array strides:\n* var sx = [ 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = includes1d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = includes1d( x, v );\n* // returns false\n*/\nfunction includes1d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar S0;\n\tvar ix;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments:\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\treturn true;\n\t\t}\n\t\tix += dx0;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = includes2d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = includes2d( x, v );\n* // returns false\n*/\nfunction includes2d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tix += dx0;\n\t\t}\n\t\tix += dx1;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = includes3d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = includes3d( x, v );\n* // returns false\n*/\nfunction includes3d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tix += dx0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t}\n\t\tix += dx2;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = includes4d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = includes4d( x, v );\n* // returns false\n*/\nfunction includes4d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t}\n\t\tix += dx3;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = includes5d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = includes5d( x, v );\n* // returns false\n*/\nfunction includes5d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t}\n\t\tix += dx4;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = includes6d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = includes6d( x, v );\n* // returns false\n*/\nfunction includes6d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t}\n\t\tix += dx5;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = includes7d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = includes7d( x, v );\n* // returns false\n*/\nfunction includes7d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t}\n\t\tix += dx6;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 8, 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = includes8d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = includes8d( x, v );\n* // returns false\n*/\nfunction includes8d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t}\n\t\tix += dx7;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 8, 8, 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = includes9d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = includes9d( x, v );\n* // returns false\n*/\nfunction includes9d( x, value ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t}\n\t\tix += dx8;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 8, 8, 8, 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = includes10d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = includes10d( x, v );\n* // returns false\n*/\nfunction includes10d( x, value ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( isRowMajor( x.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t}\n\t\tix += dx9;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default includes10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes2d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes2d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes2d( x, value ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar ox1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t// Compute the loop offset increment:\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes3d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes3d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes3d( x, value ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar ox1;\n\tvar ox2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t// Compute the loop offset increment:\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes4d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes4d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes4d( x, value ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes5d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes5d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes5d( x, value ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes6d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes6d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes6d( x, value ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes7d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes7d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes7d( x, value ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes8d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes8d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes8d( x, value ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes9d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes9d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes9d( x, value ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes10d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes10d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes10d( x, value ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes2d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes2d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes2d( x, value ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar ox1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t// Compute the loop offset increment:\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes3d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes3d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes3d( x, value ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar ox1;\n\tvar ox2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t// Compute the loop offset increment:\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes4d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes4d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes4d( x, value ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes5d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes5d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes5d( x, value ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes6d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes6d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes6d( x, value ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes7d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes7d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes7d( x, value ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 8, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes8d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes8d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes8d( x, value ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 8, 8, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes9d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes9d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes9d( x, value ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {*} value - search element\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* // Create a data buffer:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 8, 8, 8, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Perform reduction:\n* var out = blockedincludes10d( x, 6.0 );\n* // returns true\n*\n* out = blockedincludes10d( x, 100.0 );\n* // returns false\n*/\nfunction blockedincludes10d( x, value ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar get;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tget = x.accessors[0];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( get( xbuf, ix ) === value ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = blockedincludes2d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = blockedincludes2d( x, v );\n* // returns false\n*/\nfunction blockedincludes2d( x, value ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar ox1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t// Compute the loop offset increment:\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) { // eslint-disable-line max-len\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = blockedincludes3d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = blockedincludes3d( x, v );\n* // returns false\n*/\nfunction blockedincludes3d( x, value ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar ox1;\n\tvar ox2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t// Compute the loop offset increment:\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = blockedincludes4d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = blockedincludes4d( x, v );\n* // returns false\n*/\nfunction blockedincludes4d( x, value ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = blockedincludes5d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = blockedincludes5d( x, v );\n* // returns false\n*/\nfunction blockedincludes5d( x, value ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = blockedincludes6d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = blockedincludes6d( x, v );\n* // returns false\n*/\nfunction blockedincludes6d( x, value ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = blockedincludes7d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = blockedincludes7d( x, v );\n* // returns false\n*/\nfunction blockedincludes7d( x, value ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 8, 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = blockedincludes8d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = blockedincludes8d( x, v );\n* // returns false\n*/\nfunction blockedincludes8d( x, value ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 8, 8, 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = blockedincludes9d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = blockedincludes9d( x, v );\n* // returns false\n*/\nfunction blockedincludes9d( x, value ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-nullary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Tests whether a reinterpreted complex number ndarray contains a specified value via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {ComplexLike} value - search element\n* @returns {boolean} result\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 8, 8, 8, 8, 8, 8, 8, 8, 4, 2 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'complex128',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Perform reduction:\n* var v = {\n*     're': 3.0,\n*     'im': 4.0\n* };\n* var out = blockedincludes10d( x, v );\n* // returns true\n*\n* v = {\n*     're': -3.0,\n*     'im': -4.0\n* };\n* out = blockedincludes10d( x, v );\n* // returns false\n*/\nfunction blockedincludes10d( x, value ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the input ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute the index offset for the first input ndarray element in the current block:\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( xbuf[ ix ] === value.re && xbuf[ ix+1 ] === value.im ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default blockedincludes10d;\n"],"names":["MODE","INCLUDES","x","value","data","offset","xbuf","dx0","S0","ix","i0","shape","strides","dx1","sh","S1","sx","i1","isRowMajor","order","dx2","S2","i2","dx3","S3","i3","dx4","S4","i4","dx5","S5","i5","dx6","S6","i6","dx7","S7","i7","dx8","S8","i8","dx9","S9","i9","ACCESSOR_INCLUDES","accessors","get","COMPLEX_INCLUDES","re","im","BLOCKED_INCLUDES","bsize","ox1","s0","s1","ox","j0","j1","o","loopOrder","blockSize","dtype","ox2","s2","j2","ox3","s3","j3","ox4","s4","j4","ox5","s5","j5","ox6","s6","j6","ox7","s7","j7","ox8","s8","j8","ox9","s9","j9","BLOCKED_ACCESSOR_INCLUDES","BLOCKED_COMPLEX_INCLUDES","MAX_DIMS","length","includes","arrays","isCmplx","ndims","xmmv","shx","iox","len","ns","d","i","ndarray2object","isBooleanArray","isBoolean","reinterpretBoolean","accessorProtocol","isComplexArray","isComplexLike","real","imag","reinterpretComplex","gscal","iterationOrder","minmaxViewBufferIndex","ordx","numel","vind2bind","accessorincludesnd","complexincludesnd","includesnd"],"mappings":";;q7DA4BA,IAAIA,EAAO,QCAX,IAAIA,EAAO,QCAX,IAAIA,EAAO,QCyEX,IAAIC,EAAW,CCjCf,SAAqBC,EAAGC,GACvB,OAASD,EAAEE,KAAMF,EAAEG,UAAaF,CACjC,ECFA,SAAqBD,EAAGC,GACvB,IAAIG,EACAC,EACAC,EACAC,EACAC,EAeJ,IAVAF,EAAKN,EAAES,MAAO,GACdJ,EAAML,EAAEU,QAAS,GAGjBH,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGHM,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACD,OAAO,CACR,ECtBA,SAAqBL,EAAGC,GACvB,IAAIG,EACAC,EACAM,EACAC,EACAN,EACAO,EACAC,EACAP,EACAC,EACAO,EA2BJ,IAtBAH,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGHa,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACD,OAAO,CACR,EC/CA,SAAqBX,EAAGC,GACvB,IAAIG,EACAC,EACAM,EACAO,EACAN,EACAN,EACAO,EACAM,EACAL,EACAP,EACAC,EACAO,EACAK,EA+BJ,IA1BAR,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGHkB,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACD,OAAO,CACR,ECzDA,SAAqBlB,EAAGC,GACvB,IAAIG,EACAC,EACAM,EACAO,EACAG,EACAT,EACAN,EACAO,EACAM,EACAG,EACAR,EACAP,EACAC,EACAO,EACAK,EACAG,EAmCJ,IA9BAX,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGHqB,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACD,OAAO,CACR,ECjEA,SAAqBrB,EAAGC,GACvB,IAAIG,EACAC,EACAM,EACAO,EACAG,EACAG,EACAZ,EACAN,EACAO,EACAM,EACAG,EACAG,EACAX,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EAuCJ,IAlCAd,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGHwB,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACD,OAAO,CACR,EC7EA,SAAqBxB,EAAGC,GACvB,IAAIG,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAf,EACAN,EACAO,EACAM,EACAG,EACAG,EACAG,EACAd,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EA2CJ,IAtCAjB,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGH2B,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACD,OAAO,CACR,ECvFA,SAAqB3B,EAAGC,GACvB,IAAIG,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAlB,EACAN,EACAO,EACAM,EACAG,EACAG,EACAG,EACAG,EACAjB,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EA+CJ,IA1CApB,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGH8B,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACD,OAAO,CACR,ECjGA,SAAqB9B,EAAGC,GACvB,IAAIG,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACArB,EACAN,EACAO,EACAM,EACAG,EACAG,EACAG,EACAG,EACAG,EACApB,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EAmDJ,IA9CAvB,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGHiC,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CACD,OAAO,CACR,EC3GA,SAAqBjC,EAAGC,GACvB,IAAIG,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAxB,EACAN,EACAO,EACAM,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAvB,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EAuDJ,IAlDA1B,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTyB,EAAKzB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,GACxBsB,EAAMtB,EAAI,GAAQoB,EAAGpB,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTyB,EAAKzB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,GACxBsB,EAAMtB,EAAI,GAAQoB,EAAGpB,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGHoC,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CACD1B,GAAM6B,CACN,CACD,OAAO,CACR,ECrHA,SAAsBpC,EAAGC,GACxB,IAAIG,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACA3B,EACAN,EACAO,EACAM,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACA1B,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EA2DJ,IAtDA7B,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTyB,EAAKzB,EAAI,GACT4B,EAAK5B,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,GACxBsB,EAAMtB,EAAI,GAAQoB,EAAGpB,EAAG,GACxByB,EAAMzB,EAAI,GAAQuB,EAAGvB,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTyB,EAAKzB,EAAI,GACT4B,EAAK5B,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,GACxBsB,EAAMtB,EAAI,GAAQoB,EAAGpB,EAAG,GACxByB,EAAMzB,EAAI,GAAQuB,EAAGvB,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGHuC,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CACD1B,GAAM6B,CACN,CACD7B,GAAMgC,CACN,CACD,OAAO,CACR,GXxFIG,EAAoB,CY3CxB,SAAqB1C,EAAGC,GACvB,OAASD,EAAE2C,UAAW,GAAK3C,EAAEE,KAAMF,EAAEG,UAAaF,CACnD,ECFA,SAAqBD,EAAGC,GACvB,IAAIG,EACAwC,EACAvC,EACAC,EACAC,EACAC,EAkBJ,IAbAF,EAAKN,EAAES,MAAO,GACdJ,EAAML,EAAEU,QAAS,GAGjBH,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGT0C,EAAM5C,EAAE2C,UAAW,GAGbnC,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACD,OAAO,CACR,EC1BA,SAAqBL,EAAGC,GACvB,IAAIG,EACAwC,EACAvC,EACAM,EACAC,EACAN,EACAO,EACAC,EACAP,EACAC,EACAO,EA8BJ,IAzBAH,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGT0C,EAAM5C,EAAE2C,UAAW,GAGb5B,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACD,OAAO,CACR,ECnDA,SAAqBX,EAAGC,GACvB,IAAIG,EACAwC,EACAvC,EACAM,EACAO,EACAN,EACAN,EACAO,EACAM,EACAL,EACAP,EACAC,EACAO,EACAK,EAkCJ,IA7BAR,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGT0C,EAAM5C,EAAE2C,UAAW,GAGbvB,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACD,OAAO,CACR,EC7DA,SAAqBlB,EAAGC,GACvB,IAAIG,EACAwC,EACAvC,EACAM,EACAO,EACAG,EACAT,EACAN,EACAO,EACAM,EACAG,EACAR,EACAP,EACAC,EACAO,EACAK,EACAG,EAsCJ,IAjCAX,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGT0C,EAAM5C,EAAE2C,UAAW,GAGbpB,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACD,OAAO,CACR,ECrEA,SAAqBrB,EAAGC,GACvB,IAAIG,EACAwC,EACAvC,EACAM,EACAO,EACAG,EACAG,EACAZ,EACAN,EACAO,EACAM,EACAG,EACAG,EACAX,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EA0CJ,IArCAd,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGT0C,EAAM5C,EAAE2C,UAAW,GAGbjB,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACD,OAAO,CACR,ECjFA,SAAqBxB,EAAGC,GACvB,IAAIG,EACAwC,EACAvC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAf,EACAN,EACAO,EACAM,EACAG,EACAG,EACAG,EACAd,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EA8CJ,IAzCAjB,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGT0C,EAAM5C,EAAE2C,UAAW,GAGbd,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACD,OAAO,CACR,EC3FA,SAAqB3B,EAAGC,GACvB,IAAIG,EACAwC,EACAvC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAlB,EACAN,EACAO,EACAM,EACAG,EACAG,EACAG,EACAG,EACAjB,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EAkDJ,IA7CApB,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGT0C,EAAM5C,EAAE2C,UAAW,GAGbX,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACD,OAAO,CACR,ECrGA,SAAqB9B,EAAGC,GACvB,IAAIG,EACAwC,EACAvC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACArB,EACAN,EACAO,EACAM,EACAG,EACAG,EACAG,EACAG,EACAG,EACApB,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EAsDJ,IAjDAvB,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGT0C,EAAM5C,EAAE2C,UAAW,GAGbR,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CACD,OAAO,CACR,EC/GA,SAAqBjC,EAAGC,GACvB,IAAIG,EACAwC,EACAvC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAxB,EACAN,EACAO,EACAM,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAvB,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EA0DJ,IArDA1B,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTyB,EAAKzB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,GACxBsB,EAAMtB,EAAI,GAAQoB,EAAGpB,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTyB,EAAKzB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,GACxBsB,EAAMtB,EAAI,GAAQoB,EAAGpB,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGT0C,EAAM5C,EAAE2C,UAAW,GAGbL,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CACD1B,GAAM6B,CACN,CACD,OAAO,CACR,ECzHA,SAAsBpC,EAAGC,GACxB,IAAIG,EACAwC,EACAvC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACA3B,EACAN,EACAO,EACAM,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACA1B,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EA8DJ,IAzDA7B,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTyB,EAAKzB,EAAI,GACT4B,EAAK5B,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,GACxBsB,EAAMtB,EAAI,GAAQoB,EAAGpB,EAAG,GACxByB,EAAMzB,EAAI,GAAQuB,EAAGvB,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTyB,EAAKzB,EAAI,GACT4B,EAAK5B,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,GACxBsB,EAAMtB,EAAI,GAAQoB,EAAGpB,EAAG,GACxByB,EAAMzB,EAAI,GAAQuB,EAAGvB,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGT0C,EAAM5C,EAAE2C,UAAW,GAGbF,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CACD1B,GAAM6B,CACN,CACD7B,GAAMgC,CACN,CACD,OAAO,CACR,GtBlFIM,EAAmB,CuBnDvB,SAAqB7C,EAAGC,GACvB,OAASD,EAAEE,KAAMF,EAAEG,UAAaF,EAAM6C,IAAM9C,EAAEE,KAAMF,EAAEG,OAAO,KAAQF,EAAM8C,EAC5E,ECFA,SAAqB/C,EAAGC,GACvB,IAAIG,EACAC,EACAC,EACAC,EACAC,EAeJ,IAVAF,EAAKN,EAAES,MAAO,GACdJ,EAAML,EAAEU,QAAS,GAGjBH,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGHM,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACD,OAAO,CACR,ECtBA,SAAqBL,EAAGC,GACvB,IAAIG,EACAC,EACAM,EACAC,EACAN,EACAO,EACAC,EACAP,EACAC,EACAO,EA2BJ,IAtBAH,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGHa,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACD,OAAO,CACR,EC/CA,SAAqBX,EAAGC,GACvB,IAAIG,EACAC,EACAM,EACAO,EACAN,EACAN,EACAO,EACAM,EACAL,EACAP,EACAC,EACAO,EACAK,EA+BJ,IA1BAR,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGHkB,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACD,OAAO,CACR,ECvDA,SAAqBlB,EAAGC,GACvB,IAAIG,EACAC,EACAM,EACAO,EACAG,EACAT,EACAN,EACAO,EACAM,EACAG,EACAR,EACAP,EACAC,EACAO,EACAK,EACAG,EAmCJ,IA9BAX,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGHqB,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACD,OAAO,CACR,ECnEA,SAAqBrB,EAAGC,GACvB,IAAIG,EACAC,EACAM,EACAO,EACAG,EACAG,EACAZ,EACAN,EACAO,EACAM,EACAG,EACAG,EACAX,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EAuCJ,IAlCAd,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGHwB,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACD,OAAO,CACR,EC7EA,SAAqBxB,EAAGC,GACvB,IAAIG,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAf,EACAN,EACAO,EACAM,EACAG,EACAG,EACAG,EACAd,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EA2CJ,IAtCAjB,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGH2B,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACD,OAAO,CACR,ECvFA,SAAqB3B,EAAGC,GACvB,IAAIG,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAlB,EACAN,EACAO,EACAM,EACAG,EACAG,EACAG,EACAG,EACAjB,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EA+CJ,IA1CApB,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGH8B,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACD,OAAO,CACR,ECjGA,SAAqB9B,EAAGC,GACvB,IAAIG,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACArB,EACAN,EACAO,EACAM,EACAG,EACAG,EACAG,EACAG,EACAG,EACApB,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EAmDJ,IA9CAvB,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGHiC,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CACD,OAAO,CACR,EC3GA,SAAqBjC,EAAGC,GACvB,IAAIG,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAxB,EACAN,EACAO,EACAM,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAvB,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EAuDJ,IAlDA1B,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTyB,EAAKzB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,GACxBsB,EAAMtB,EAAI,GAAQoB,EAAGpB,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTyB,EAAKzB,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,GACxBsB,EAAMtB,EAAI,GAAQoB,EAAGpB,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGHoC,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CACD1B,GAAM6B,CACN,CACD,OAAO,CACR,ECrHA,SAAsBpC,EAAGC,GACxB,IAAIG,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACA3B,EACAN,EACAO,EACAM,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACA1B,EACAP,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EA2DJ,IAtDA7B,EAAKZ,EAAES,MACPK,EAAKd,EAAEU,QACFM,EAAYhB,EAAEiB,QAElBX,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTyB,EAAKzB,EAAI,GACT4B,EAAK5B,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,GACxBsB,EAAMtB,EAAI,GAAQoB,EAAGpB,EAAG,GACxByB,EAAMzB,EAAI,GAAQuB,EAAGvB,EAAG,KAGxBR,EAAKM,EAAI,GACTC,EAAKD,EAAI,GACTO,EAAKP,EAAI,GACTU,EAAKV,EAAI,GACTa,EAAKb,EAAI,GACTgB,EAAKhB,EAAI,GACTmB,EAAKnB,EAAI,GACTsB,EAAKtB,EAAI,GACTyB,EAAKzB,EAAI,GACT4B,EAAK5B,EAAI,GACTP,EAAMS,EAAI,GACVH,EAAMG,EAAI,GAAQR,EAAGQ,EAAG,GACxBI,EAAMJ,EAAI,GAAQD,EAAGC,EAAG,GACxBO,EAAMP,EAAI,GAAQK,EAAGL,EAAG,GACxBU,EAAMV,EAAI,GAAQQ,EAAGR,EAAG,GACxBa,EAAMb,EAAI,GAAQW,EAAGX,EAAG,GACxBgB,EAAMhB,EAAI,GAAQc,EAAGd,EAAG,GACxBmB,EAAMnB,EAAI,GAAQiB,EAAGjB,EAAG,GACxBsB,EAAMtB,EAAI,GAAQoB,EAAGpB,EAAG,GACxByB,EAAMzB,EAAI,GAAQuB,EAAGvB,EAAG,IAGzBP,EAAKP,EAAEG,OAGPC,EAAOJ,EAAEE,KAGHuC,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CACD1B,GAAM6B,CACN,CACD7B,GAAMgC,CACN,CACD,OAAO,CACR,GjCtEIS,EAAmB,CkClEvB,SAA4BhD,EAAGC,GAC9B,IAAIgD,EACA7C,EACAC,EACAM,EACAuC,EACAtC,EACAuC,EACAC,EACAtC,EACAuC,EACA9C,EACAC,EACAO,EACAuC,EACAC,EACAC,EAsBJ,IAhBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGHyC,EAAK3C,EAAG,GAAI2C,EAAK,GAStB,IARKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEPC,EAAMG,EAAOE,EAAGzC,EAAG,GACbwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBC,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CAGH,OAAO,CACR,ECxEA,SAA4BX,EAAGC,GAC9B,IAAIgD,EACA7C,EACAC,EACAM,EACAO,EACAgC,EACAU,EACAhD,EACAuC,EACAC,EACAS,EACA/C,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAkC,EACAC,EACAO,EACAN,EAsBJ,IAhBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGHgD,EAAKlD,EAAG,GAAIkD,EAAK,GAStB,IARKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEPW,EAAMP,EAAOS,EAAGhD,EAAG,GACbyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBM,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CAIJ,OAAO,CACR,EC7FA,SAA4BlB,EAAGC,GAC9B,IAAIgD,EACA7C,EACAC,EACAM,EACAO,EACAG,EACA6B,EACAU,EACAG,EACAnD,EACAuC,EACAC,EACAS,EACAG,EACAlD,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACA+B,EACAC,EACAO,EACAG,EACAT,EAsBJ,IAhBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGHmD,EAAKrD,EAAG,GAAIqD,EAAK,GAStB,IARKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPc,EAAMV,EAAOY,EAAGnD,EAAG,GACbgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBS,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CAKL,OAAO,CACR,EChHA,SAA4BrB,EAAGC,GAC9B,IAAIgD,EACA7C,EACAC,EACAM,EACAO,EACAG,EACAG,EACA0B,EACAU,EACAG,EACAG,EACAtD,EACAuC,EACAC,EACAS,EACAG,EACAG,EACArD,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACA4B,EACAC,EACAO,EACAG,EACAG,EACAZ,EAsBJ,IAhBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGHsD,EAAKxD,EAAG,GAAIwD,EAAK,GAStB,IARKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPiB,EAAMb,EAAOe,EAAGtD,EAAG,GACbmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBY,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CAMN,OAAO,CACR,ECnIA,SAA4BxB,EAAGC,GAC9B,IAAIgD,EACA7C,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAuB,EACAU,EACAG,EACAG,EACAG,EACAzD,EACAuC,EACAC,EACAS,EACAG,EACAG,EACAG,EACAxD,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAyB,EACAC,EACAO,EACAG,EACAG,EACAG,EACAf,EAsBJ,IAhBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGHyD,EAAK3D,EAAG,GAAI2D,EAAK,GAStB,IARKA,EAAKtB,GACTqB,EAAKC,EACLA,EAAK,IAELD,EAAKrB,EACLsB,GAAMtB,GAEPoB,EAAMhB,EAAOkB,EAAGzD,EAAG,GACbsD,EAAKxD,EAAG,GAAIwD,EAAK,GAUtB,IATKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPtB,EAAMb,EAAG,GAAOqD,EAAGrD,EAAG,GACtBoD,EAAMG,EAAQD,EAAGtD,EAAG,GACdmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBe,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CAOP,OAAO,CACR,ECtJA,SAA4B3B,EAAGC,GAC9B,IAAIgD,EACA7C,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAoB,EACAU,EACAG,EACAG,EACAG,EACAG,EACA5D,EACAuC,EACAC,EACAS,EACAG,EACAG,EACAG,EACAG,EACA3D,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAsB,EACAC,EACAO,EACAG,EACAG,EACAG,EACAG,EACAlB,EAsBJ,IAhBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGH4D,EAAK9D,EAAG,GAAI8D,EAAK,GAStB,IARKA,EAAKzB,GACTwB,EAAKC,EACLA,EAAK,IAELD,EAAKxB,EACLyB,GAAMzB,GAEPuB,EAAMnB,EAAOqB,EAAG5D,EAAG,GACbyD,EAAK3D,EAAG,GAAI2D,EAAK,GAUtB,IATKA,EAAKtB,GACTqB,EAAKC,EACLA,EAAK,IAELD,EAAKrB,EACLsB,GAAMtB,GAEPnB,EAAMhB,EAAG,GAAOwD,EAAGxD,EAAG,GACtBuD,EAAMG,EAAQD,EAAGzD,EAAG,GACdsD,EAAKxD,EAAG,GAAIwD,EAAK,GAUtB,IATKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPtB,EAAMb,EAAG,GAAOqD,EAAGrD,EAAG,GACtBoD,EAAMG,EAAQD,EAAGtD,EAAG,GACdmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBkB,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CAQR,OAAO,CACR,ECzKA,SAA4B9B,EAAGC,GAC9B,IAAIgD,EACA7C,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAiB,EACAU,EACAG,EACAG,EACAG,EACAG,EACAG,EACA/D,EACAuC,EACAC,EACAS,EACAG,EACAG,EACAG,EACAG,EACAG,EACA9D,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAmB,EACAC,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACArB,EAsBJ,IAhBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGH+D,EAAKjE,EAAG,GAAIiE,EAAK,GAStB,IARKA,EAAK5B,GACT2B,EAAKC,EACLA,EAAK,IAELD,EAAK3B,EACL4B,GAAM5B,GAEP0B,EAAMtB,EAAOwB,EAAG/D,EAAG,GACb4D,EAAK9D,EAAG,GAAI8D,EAAK,GAUtB,IATKA,EAAKzB,GACTwB,EAAKC,EACLA,EAAK,IAELD,EAAKxB,EACLyB,GAAMzB,GAEPhB,EAAMnB,EAAG,GAAO2D,EAAG3D,EAAG,GACtB0D,EAAMG,EAAQD,EAAG5D,EAAG,GACdyD,EAAK3D,EAAG,GAAI2D,EAAK,GAUtB,IATKA,EAAKtB,GACTqB,EAAKC,EACLA,EAAK,IAELD,EAAKrB,EACLsB,GAAMtB,GAEPnB,EAAMhB,EAAG,GAAOwD,EAAGxD,EAAG,GACtBuD,EAAMG,EAAQD,EAAGzD,EAAG,GACdsD,EAAKxD,EAAG,GAAIwD,EAAK,GAUtB,IATKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPtB,EAAMb,EAAG,GAAOqD,EAAGrD,EAAG,GACtBoD,EAAMG,EAAQD,EAAGtD,EAAG,GACdmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBqB,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CAST,OAAO,CACR,EC5LA,SAA4BjC,EAAGC,GAC9B,IAAIgD,EACA7C,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAc,EACAU,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAlE,EACAuC,EACAC,EACAS,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAjE,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAgB,EACAC,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAxB,GAsBJ,IAhBA5C,GADA4C,GAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,GAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGHkE,EAAKpE,EAAG,GAAIoE,EAAK,GAStB,IARKA,EAAK/B,GACT8B,EAAKC,EACLA,EAAK,IAELD,EAAK9B,EACL+B,GAAM/B,GAEP6B,EAAMzB,EAAO2B,EAAGlE,EAAG,GACb+D,EAAKjE,EAAG,GAAIiE,EAAK,GAUtB,IATKA,EAAK5B,GACT2B,EAAKC,EACLA,EAAK,IAELD,EAAK3B,EACL4B,GAAM5B,GAEPb,EAAMtB,EAAG,GAAO8D,EAAG9D,EAAG,GACtB6D,EAAMG,EAAQD,EAAG/D,EAAG,GACd4D,EAAK9D,EAAG,GAAI8D,EAAK,GAUtB,IATKA,EAAKzB,GACTwB,EAAKC,EACLA,EAAK,IAELD,EAAKxB,EACLyB,GAAMzB,GAEPhB,EAAMnB,EAAG,GAAO2D,EAAG3D,EAAG,GACtB0D,EAAMG,EAAQD,EAAG5D,EAAG,GACdyD,EAAK3D,EAAG,GAAI2D,EAAK,GAUtB,IATKA,EAAKtB,GACTqB,EAAKC,EACLA,EAAK,IAELD,EAAKrB,EACLsB,GAAMtB,GAEPnB,EAAMhB,EAAG,GAAOwD,EAAGxD,EAAG,GACtBuD,EAAMG,EAAQD,EAAGzD,EAAG,GACdsD,EAAKxD,EAAG,GAAIwD,EAAK,GAUtB,IATKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPtB,EAAMb,EAAG,GAAOqD,EAAGrD,EAAG,GACtBoD,EAAMG,EAAQD,EAAGtD,EAAG,GACdmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBwB,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CACD1B,GAAM6B,CACN,CAUV,OAAO,CACR,EC/MA,SAA6BpC,EAAGC,GAC/B,IAAIgD,EACA7C,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAW,EACAU,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACArE,EACAuC,EACAC,EACAS,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACApE,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAa,EACAC,EACAO,EACAG,EACAG,EACAG,GACAG,GACAG,GACAG,GACAG,GACA3B,GAsBJ,IAhBA5C,GADA4C,GAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,GAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGHqE,GAAKvE,EAAG,GAAIuE,GAAK,GAStB,IARKA,GAAKlC,GACTiC,EAAKC,GACLA,GAAK,IAELD,EAAKjC,EACLkC,IAAMlC,GAEPgC,EAAM5B,EAAO8B,GAAGrE,EAAG,GACbkE,GAAKpE,EAAG,GAAIoE,GAAK,GAUtB,IATKA,GAAK/B,GACT8B,EAAKC,GACLA,GAAK,IAELD,EAAK9B,EACL+B,IAAM/B,GAEPV,EAAMzB,EAAG,GAAOiE,EAAGjE,EAAG,GACtBgE,EAAMG,EAAQD,GAAGlE,EAAG,GACd+D,GAAKjE,EAAG,GAAIiE,GAAK,GAUtB,IATKA,GAAK5B,GACT2B,EAAKC,GACLA,GAAK,IAELD,EAAK3B,EACL4B,IAAM5B,GAEPb,EAAMtB,EAAG,GAAO8D,EAAG9D,EAAG,GACtB6D,EAAMG,EAAQD,GAAG/D,EAAG,GACd4D,GAAK9D,EAAG,GAAI8D,GAAK,GAUtB,IATKA,GAAKzB,GACTwB,EAAKC,GACLA,GAAK,IAELD,EAAKxB,EACLyB,IAAMzB,GAEPhB,EAAMnB,EAAG,GAAO2D,EAAG3D,EAAG,GACtB0D,EAAMG,EAAQD,GAAG5D,EAAG,GACdyD,GAAK3D,EAAG,GAAI2D,GAAK,GAUtB,IATKA,GAAKtB,GACTqB,EAAKC,GACLA,GAAK,IAELD,EAAKrB,EACLsB,IAAMtB,GAEPnB,EAAMhB,EAAG,GAAOwD,EAAGxD,EAAG,GACtBuD,EAAMG,EAAQD,GAAGzD,EAAG,GACdsD,EAAKxD,EAAG,GAAIwD,EAAK,GAUtB,IATKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPtB,EAAMb,EAAG,GAAOqD,EAAGrD,EAAG,GACtBoD,EAAMG,EAAQD,EAAGtD,EAAG,GACdmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhB2B,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EACnB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CACD1B,GAAM6B,CACN,CACD7B,GAAMgC,CACN,CAWX,OAAO,CACR,G1CvJI6C,EAA4B,C2C1EhC,SAA4BpF,EAAGC,GAC9B,IAAIgD,EACA7C,EACAwC,EACAvC,EACAM,EACAuC,EACAtC,EACAuC,EACAC,EACAtC,EACAuC,EACA9C,EACAC,EACAO,EACAuC,EACAC,EACAC,EAyBJ,IAnBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGT8B,EAAM5C,EAAE2C,UAAU,GAGZY,EAAK3C,EAAG,GAAI2C,EAAK,GAStB,IARKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEPC,EAAMG,EAAOE,EAAGzC,EAAG,GACbwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBC,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CAGH,OAAO,CACR,EC5EA,SAA4BX,EAAGC,GAC9B,IAAIgD,EACA7C,EACAwC,EACAvC,EACAM,EACAO,EACAgC,EACAU,EACAhD,EACAuC,EACAC,EACAS,EACA/C,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAkC,EACAC,EACAO,EACAN,EAyBJ,IAnBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGT8B,EAAM5C,EAAE2C,UAAU,GAGZmB,EAAKlD,EAAG,GAAIkD,EAAK,GAStB,IARKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEPW,EAAMP,EAAOS,EAAGhD,EAAG,GACbyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBM,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CAIJ,OAAO,CACR,ECjGA,SAA4BlB,EAAGC,GAC9B,IAAIgD,EACA7C,EACAwC,EACAvC,EACAM,EACAO,EACAG,EACA6B,EACAU,EACAG,EACAnD,EACAuC,EACAC,EACAS,EACAG,EACAlD,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACA+B,EACAC,EACAO,EACAG,EACAT,EAyBJ,IAnBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGT8B,EAAM5C,EAAE2C,UAAU,GAGZsB,EAAKrD,EAAG,GAAIqD,EAAK,GAStB,IARKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPc,EAAMV,EAAOY,EAAGnD,EAAG,GACbgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBS,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CAKL,OAAO,CACR,ECpHA,SAA4BrB,EAAGC,GAC9B,IAAIgD,EACA7C,EACAwC,EACAvC,EACAM,EACAO,EACAG,EACAG,EACA0B,EACAU,EACAG,EACAG,EACAtD,EACAuC,EACAC,EACAS,EACAG,EACAG,EACArD,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACA4B,EACAC,EACAO,EACAG,EACAG,EACAZ,EAyBJ,IAnBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGT8B,EAAM5C,EAAE2C,UAAU,GAGZyB,EAAKxD,EAAG,GAAIwD,EAAK,GAStB,IARKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPiB,EAAMb,EAAOe,EAAGtD,EAAG,GACbmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBY,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CAMN,OAAO,CACR,ECvIA,SAA4BxB,EAAGC,GAC9B,IAAIgD,EACA7C,EACAwC,EACAvC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAuB,EACAU,EACAG,EACAG,EACAG,EACAzD,EACAuC,EACAC,EACAS,EACAG,EACAG,EACAG,EACAxD,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAyB,EACAC,EACAO,EACAG,EACAG,EACAG,EACAf,EAyBJ,IAnBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGT8B,EAAM5C,EAAE2C,UAAU,GAGZ4B,EAAK3D,EAAG,GAAI2D,EAAK,GAStB,IARKA,EAAKtB,GACTqB,EAAKC,EACLA,EAAK,IAELD,EAAKrB,EACLsB,GAAMtB,GAEPoB,EAAMhB,EAAOkB,EAAGzD,EAAG,GACbsD,EAAKxD,EAAG,GAAIwD,EAAK,GAUtB,IATKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPtB,EAAMb,EAAG,GAAOqD,EAAGrD,EAAG,GACtBoD,EAAMG,EAAQD,EAAGtD,EAAG,GACdmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBe,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CAOP,OAAO,CACR,EC1JA,SAA4B3B,EAAGC,GAC9B,IAAIgD,EACA7C,EACAwC,EACAvC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAoB,EACAU,EACAG,EACAG,EACAG,EACAG,EACA5D,EACAuC,EACAC,EACAS,EACAG,EACAG,EACAG,EACAG,EACA3D,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAsB,EACAC,EACAO,EACAG,EACAG,EACAG,EACAG,EACAlB,EAyBJ,IAnBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGT8B,EAAM5C,EAAE2C,UAAU,GAGZ+B,EAAK9D,EAAG,GAAI8D,EAAK,GAStB,IARKA,EAAKzB,GACTwB,EAAKC,EACLA,EAAK,IAELD,EAAKxB,EACLyB,GAAMzB,GAEPuB,EAAMnB,EAAOqB,EAAG5D,EAAG,GACbyD,EAAK3D,EAAG,GAAI2D,EAAK,GAUtB,IATKA,EAAKtB,GACTqB,EAAKC,EACLA,EAAK,IAELD,EAAKrB,EACLsB,GAAMtB,GAEPnB,EAAMhB,EAAG,GAAOwD,EAAGxD,EAAG,GACtBuD,EAAMG,EAAQD,EAAGzD,EAAG,GACdsD,EAAKxD,EAAG,GAAIwD,EAAK,GAUtB,IATKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPtB,EAAMb,EAAG,GAAOqD,EAAGrD,EAAG,GACtBoD,EAAMG,EAAQD,EAAGtD,EAAG,GACdmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBkB,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CAQR,OAAO,CACR,EC7KA,SAA4B9B,EAAGC,GAC9B,IAAIgD,EACA7C,EACAwC,EACAvC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAiB,EACAU,EACAG,EACAG,EACAG,EACAG,EACAG,EACA/D,EACAuC,EACAC,EACAS,EACAG,EACAG,EACAG,EACAG,EACAG,EACA9D,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAmB,EACAC,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACArB,EAyBJ,IAnBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGT8B,EAAM5C,EAAE2C,UAAU,GAGZkC,EAAKjE,EAAG,GAAIiE,EAAK,GAStB,IARKA,EAAK5B,GACT2B,EAAKC,EACLA,EAAK,IAELD,EAAK3B,EACL4B,GAAM5B,GAEP0B,EAAMtB,EAAOwB,EAAG/D,EAAG,GACb4D,EAAK9D,EAAG,GAAI8D,EAAK,GAUtB,IATKA,EAAKzB,GACTwB,EAAKC,EACLA,EAAK,IAELD,EAAKxB,EACLyB,GAAMzB,GAEPhB,EAAMnB,EAAG,GAAO2D,EAAG3D,EAAG,GACtB0D,EAAMG,EAAQD,EAAG5D,EAAG,GACdyD,EAAK3D,EAAG,GAAI2D,EAAK,GAUtB,IATKA,EAAKtB,GACTqB,EAAKC,EACLA,EAAK,IAELD,EAAKrB,EACLsB,GAAMtB,GAEPnB,EAAMhB,EAAG,GAAOwD,EAAGxD,EAAG,GACtBuD,EAAMG,EAAQD,EAAGzD,EAAG,GACdsD,EAAKxD,EAAG,GAAIwD,EAAK,GAUtB,IATKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPtB,EAAMb,EAAG,GAAOqD,EAAGrD,EAAG,GACtBoD,EAAMG,EAAQD,EAAGtD,EAAG,GACdmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBqB,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CAST,OAAO,CACR,EChMA,SAA4BjC,EAAGC,GAC9B,IAAIgD,EACA7C,EACAwC,EACAvC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAc,EACAU,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAlE,EACAuC,EACAC,EACAS,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAjE,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAgB,EACAC,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,GACAxB,GAyBJ,IAnBA5C,GADA4C,GAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,GAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGT8B,EAAM5C,EAAE2C,UAAU,GAGZqC,GAAKpE,EAAG,GAAIoE,GAAK,GAStB,IARKA,GAAK/B,GACT8B,EAAKC,GACLA,GAAK,IAELD,EAAK9B,EACL+B,IAAM/B,GAEP6B,EAAMzB,EAAO2B,GAAGlE,EAAG,GACb+D,EAAKjE,EAAG,GAAIiE,EAAK,GAUtB,IATKA,EAAK5B,GACT2B,EAAKC,EACLA,EAAK,IAELD,EAAK3B,EACL4B,GAAM5B,GAEPb,EAAMtB,EAAG,GAAO8D,EAAG9D,EAAG,GACtB6D,EAAMG,EAAQD,EAAG/D,EAAG,GACd4D,EAAK9D,EAAG,GAAI8D,EAAK,GAUtB,IATKA,EAAKzB,GACTwB,EAAKC,EACLA,EAAK,IAELD,EAAKxB,EACLyB,GAAMzB,GAEPhB,EAAMnB,EAAG,GAAO2D,EAAG3D,EAAG,GACtB0D,EAAMG,EAAQD,EAAG5D,EAAG,GACdyD,EAAK3D,EAAG,GAAI2D,EAAK,GAUtB,IATKA,EAAKtB,GACTqB,EAAKC,EACLA,EAAK,IAELD,EAAKrB,EACLsB,GAAMtB,GAEPnB,EAAMhB,EAAG,GAAOwD,EAAGxD,EAAG,GACtBuD,EAAMG,EAAQD,EAAGzD,EAAG,GACdsD,EAAKxD,EAAG,GAAIwD,EAAK,GAUtB,IATKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPtB,EAAMb,EAAG,GAAOqD,EAAGrD,EAAG,GACtBoD,EAAMG,EAAQD,EAAGtD,EAAG,GACdmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBwB,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CACD1B,GAAM6B,CACN,CAUV,OAAO,CACR,ECnNA,SAA6BpC,EAAGC,GAC/B,IAAIgD,EACA7C,EACAwC,EACAvC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAW,EACAU,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACArE,EACAuC,EACAC,EACAS,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACApE,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAa,EACAC,EACAO,EACAG,EACAG,GACAG,GACAG,GACAG,GACAG,GACAG,GACA3B,GAyBJ,IAnBA5C,GADA4C,GAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,GAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGT8B,EAAM5C,EAAE2C,UAAU,GAGZwC,GAAKvE,EAAG,GAAIuE,GAAK,GAStB,IARKA,GAAKlC,GACTiC,EAAKC,GACLA,GAAK,IAELD,EAAKjC,EACLkC,IAAMlC,GAEPgC,EAAM5B,EAAO8B,GAAGrE,EAAG,GACbkE,GAAKpE,EAAG,GAAIoE,GAAK,GAUtB,IATKA,GAAK/B,GACT8B,EAAKC,GACLA,GAAK,IAELD,EAAK9B,EACL+B,IAAM/B,GAEPV,EAAMzB,EAAG,GAAOiE,EAAGjE,EAAG,GACtBgE,EAAMG,EAAQD,GAAGlE,EAAG,GACd+D,GAAKjE,EAAG,GAAIiE,GAAK,GAUtB,IATKA,GAAK5B,GACT2B,EAAKC,GACLA,GAAK,IAELD,EAAK3B,EACL4B,IAAM5B,GAEPb,EAAMtB,EAAG,GAAO8D,EAAG9D,EAAG,GACtB6D,EAAMG,EAAQD,GAAG/D,EAAG,GACd4D,GAAK9D,EAAG,GAAI8D,GAAK,GAUtB,IATKA,GAAKzB,GACTwB,EAAKC,GACLA,GAAK,IAELD,EAAKxB,EACLyB,IAAMzB,GAEPhB,EAAMnB,EAAG,GAAO2D,EAAG3D,EAAG,GACtB0D,EAAMG,EAAQD,GAAG5D,EAAG,GACdyD,GAAK3D,EAAG,GAAI2D,GAAK,GAUtB,IATKA,GAAKtB,GACTqB,EAAKC,GACLA,GAAK,IAELD,EAAKrB,EACLsB,IAAMtB,GAEPnB,EAAMhB,EAAG,GAAOwD,EAAGxD,EAAG,GACtBuD,EAAMG,EAAQD,GAAGzD,EAAG,GACdsD,GAAKxD,EAAG,GAAIwD,GAAK,GAUtB,IATKA,GAAKnB,GACTkB,EAAKC,GACLA,GAAK,IAELD,EAAKlB,EACLmB,IAAMnB,GAEPtB,EAAMb,EAAG,GAAOqD,EAAGrD,EAAG,GACtBoD,EAAMG,EAAQD,GAAGtD,EAAG,GACdmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhB2B,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKoC,EAAKxC,EAAMG,KAASN,EACxB,OAAO,EAERM,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CACD1B,GAAM6B,CACN,CACD7B,GAAMgC,CACN,CAWX,OAAO,CACR,GnDnJI8C,EAA2B,CoDhF/B,SAA4BrF,EAAGC,GAC9B,IAAIgD,EACA7C,EACAC,EACAM,EACAuC,EACAtC,EACAuC,EACAC,EACAtC,EACAuC,EACA9C,EACAC,EACAO,EACAuC,EACAC,EACAC,EAsBJ,IAhBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGHyC,EAAK3C,EAAG,GAAI2C,EAAK,GAStB,IARKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEPC,EAAMG,EAAOE,EAAGzC,EAAG,GACbwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBC,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CAGH,OAAO,CACR,ECxEA,SAA4BX,EAAGC,GAC9B,IAAIgD,EACA7C,EACAC,EACAM,EACAO,EACAgC,EACAU,EACAhD,EACAuC,EACAC,EACAS,EACA/C,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAkC,EACAC,EACAO,EACAN,EAsBJ,IAhBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGHgD,EAAKlD,EAAG,GAAIkD,EAAK,GAStB,IARKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEPW,EAAMP,EAAOS,EAAGhD,EAAG,GACbyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBM,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CAIJ,OAAO,CACR,EC7FA,SAA4BlB,EAAGC,GAC9B,IAAIgD,EACA7C,EACAC,EACAM,EACAO,EACAG,EACA6B,EACAU,EACAG,EACAnD,EACAuC,EACAC,EACAS,EACAG,EACAlD,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACA+B,EACAC,EACAO,EACAG,EACAT,EAsBJ,IAhBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGHmD,EAAKrD,EAAG,GAAIqD,EAAK,GAStB,IARKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPc,EAAMV,EAAOY,EAAGnD,EAAG,GACbgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBS,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CAKL,OAAO,CACR,EChHA,SAA4BrB,EAAGC,GAC9B,IAAIgD,EACA7C,EACAC,EACAM,EACAO,EACAG,EACAG,EACA0B,EACAU,EACAG,EACAG,EACAtD,EACAuC,EACAC,EACAS,EACAG,EACAG,EACArD,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACA4B,EACAC,EACAO,EACAG,EACAG,EACAZ,EAsBJ,IAhBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGHsD,EAAKxD,EAAG,GAAIwD,EAAK,GAStB,IARKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPiB,EAAMb,EAAOe,EAAGtD,EAAG,GACbmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBY,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CAMN,OAAO,CACR,ECnIA,SAA4BxB,EAAGC,GAC9B,IAAIgD,EACA7C,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAuB,EACAU,EACAG,EACAG,EACAG,EACAzD,EACAuC,EACAC,EACAS,EACAG,EACAG,EACAG,EACAxD,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAyB,EACAC,EACAO,EACAG,EACAG,EACAG,EACAf,EAsBJ,IAhBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGHyD,EAAK3D,EAAG,GAAI2D,EAAK,GAStB,IARKA,EAAKtB,GACTqB,EAAKC,EACLA,EAAK,IAELD,EAAKrB,EACLsB,GAAMtB,GAEPoB,EAAMhB,EAAOkB,EAAGzD,EAAG,GACbsD,EAAKxD,EAAG,GAAIwD,EAAK,GAUtB,IATKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPtB,EAAMb,EAAG,GAAOqD,EAAGrD,EAAG,GACtBoD,EAAMG,EAAQD,EAAGtD,EAAG,GACdmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBe,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CAOP,OAAO,CACR,ECtJA,SAA4B3B,EAAGC,GAC9B,IAAIgD,EACA7C,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAoB,EACAU,EACAG,EACAG,EACAG,EACAG,EACA5D,EACAuC,EACAC,EACAS,EACAG,EACAG,EACAG,EACAG,EACA3D,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAsB,EACAC,EACAO,EACAG,EACAG,EACAG,EACAG,EACAlB,EAsBJ,IAhBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGH4D,EAAK9D,EAAG,GAAI8D,EAAK,GAStB,IARKA,EAAKzB,GACTwB,EAAKC,EACLA,EAAK,IAELD,EAAKxB,EACLyB,GAAMzB,GAEPuB,EAAMnB,EAAOqB,EAAG5D,EAAG,GACbyD,EAAK3D,EAAG,GAAI2D,EAAK,GAUtB,IATKA,EAAKtB,GACTqB,EAAKC,EACLA,EAAK,IAELD,EAAKrB,EACLsB,GAAMtB,GAEPnB,EAAMhB,EAAG,GAAOwD,EAAGxD,EAAG,GACtBuD,EAAMG,EAAQD,EAAGzD,EAAG,GACdsD,EAAKxD,EAAG,GAAIwD,EAAK,GAUtB,IATKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPtB,EAAMb,EAAG,GAAOqD,EAAGrD,EAAG,GACtBoD,EAAMG,EAAQD,EAAGtD,EAAG,GACdmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBkB,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CAQR,OAAO,CACR,ECzKA,SAA4B9B,EAAGC,GAC9B,IAAIgD,EACA7C,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAiB,EACAU,EACAG,EACAG,EACAG,EACAG,EACAG,EACA/D,EACAuC,EACAC,EACAS,EACAG,EACAG,EACAG,EACAG,EACAG,EACA9D,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAmB,EACAC,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACArB,EAsBJ,IAhBA5C,GADA4C,EAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,EAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGH+D,EAAKjE,EAAG,GAAIiE,EAAK,GAStB,IARKA,EAAK5B,GACT2B,EAAKC,EACLA,EAAK,IAELD,EAAK3B,EACL4B,GAAM5B,GAEP0B,EAAMtB,EAAOwB,EAAG/D,EAAG,GACb4D,EAAK9D,EAAG,GAAI8D,EAAK,GAUtB,IATKA,EAAKzB,GACTwB,EAAKC,EACLA,EAAK,IAELD,EAAKxB,EACLyB,GAAMzB,GAEPhB,EAAMnB,EAAG,GAAO2D,EAAG3D,EAAG,GACtB0D,EAAMG,EAAQD,EAAG5D,EAAG,GACdyD,EAAK3D,EAAG,GAAI2D,EAAK,GAUtB,IATKA,EAAKtB,GACTqB,EAAKC,EACLA,EAAK,IAELD,EAAKrB,EACLsB,GAAMtB,GAEPnB,EAAMhB,EAAG,GAAOwD,EAAGxD,EAAG,GACtBuD,EAAMG,EAAQD,EAAGzD,EAAG,GACdsD,EAAKxD,EAAG,GAAIwD,EAAK,GAUtB,IATKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPtB,EAAMb,EAAG,GAAOqD,EAAGrD,EAAG,GACtBoD,EAAMG,EAAQD,EAAGtD,EAAG,GACdmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBqB,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CAST,OAAO,CACR,EC5LA,SAA4BjC,EAAGC,GAC9B,IAAIgD,EACA7C,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAc,EACAU,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAlE,EACAuC,EACAC,EACAS,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAjE,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAgB,EACAC,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAxB,GAsBJ,IAhBA5C,GADA4C,GAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,GAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGHkE,EAAKpE,EAAG,GAAIoE,EAAK,GAStB,IARKA,EAAK/B,GACT8B,EAAKC,EACLA,EAAK,IAELD,EAAK9B,EACL+B,GAAM/B,GAEP6B,EAAMzB,EAAO2B,EAAGlE,EAAG,GACb+D,EAAKjE,EAAG,GAAIiE,EAAK,GAUtB,IATKA,EAAK5B,GACT2B,EAAKC,EACLA,EAAK,IAELD,EAAK3B,EACL4B,GAAM5B,GAEPb,EAAMtB,EAAG,GAAO8D,EAAG9D,EAAG,GACtB6D,EAAMG,EAAQD,EAAG/D,EAAG,GACd4D,EAAK9D,EAAG,GAAI8D,EAAK,GAUtB,IATKA,EAAKzB,GACTwB,EAAKC,EACLA,EAAK,IAELD,EAAKxB,EACLyB,GAAMzB,GAEPhB,EAAMnB,EAAG,GAAO2D,EAAG3D,EAAG,GACtB0D,EAAMG,EAAQD,EAAG5D,EAAG,GACdyD,EAAK3D,EAAG,GAAI2D,EAAK,GAUtB,IATKA,EAAKtB,GACTqB,EAAKC,EACLA,EAAK,IAELD,EAAKrB,EACLsB,GAAMtB,GAEPnB,EAAMhB,EAAG,GAAOwD,EAAGxD,EAAG,GACtBuD,EAAMG,EAAQD,EAAGzD,EAAG,GACdsD,EAAKxD,EAAG,GAAIwD,EAAK,GAUtB,IATKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPtB,EAAMb,EAAG,GAAOqD,EAAGrD,EAAG,GACtBoD,EAAMG,EAAQD,EAAGtD,EAAG,GACdmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhBwB,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CACD1B,GAAM6B,CACN,CAUV,OAAO,CACR,EC/MA,SAA6BpC,EAAGC,GAC/B,IAAIgD,EACA7C,EACAC,EACAM,EACAO,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAW,EACAU,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACArE,EACAuC,EACAC,EACAS,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACApE,EACAuC,EACA9C,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAa,EACAC,EACAO,EACAG,EACAG,EACAG,GACAG,GACAG,GACAG,GACAG,GACA3B,GAsBJ,IAhBA5C,GADA4C,GAAIC,EAAWzD,EAAES,MAAOT,EAAEU,UACnBE,GACPE,EAAK0C,GAAE1C,GAGPmC,EAAQS,EAAW1D,EAAE2D,OAGrBN,EAAKrD,EAAEG,OAGPC,EAAOJ,EAAEE,KAGTG,EAAMS,EAAG,GAGHqE,GAAKvE,EAAG,GAAIuE,GAAK,GAStB,IARKA,GAAKlC,GACTiC,EAAKC,GACLA,GAAK,IAELD,EAAKjC,EACLkC,IAAMlC,GAEPgC,EAAM5B,EAAO8B,GAAGrE,EAAG,GACbkE,GAAKpE,EAAG,GAAIoE,GAAK,GAUtB,IATKA,GAAK/B,GACT8B,EAAKC,GACLA,GAAK,IAELD,EAAK9B,EACL+B,IAAM/B,GAEPV,EAAMzB,EAAG,GAAOiE,EAAGjE,EAAG,GACtBgE,EAAMG,EAAQD,GAAGlE,EAAG,GACd+D,GAAKjE,EAAG,GAAIiE,GAAK,GAUtB,IATKA,GAAK5B,GACT2B,EAAKC,GACLA,GAAK,IAELD,EAAK3B,EACL4B,IAAM5B,GAEPb,EAAMtB,EAAG,GAAO8D,EAAG9D,EAAG,GACtB6D,EAAMG,EAAQD,GAAG/D,EAAG,GACd4D,GAAK9D,EAAG,GAAI8D,GAAK,GAUtB,IATKA,GAAKzB,GACTwB,EAAKC,GACLA,GAAK,IAELD,EAAKxB,EACLyB,IAAMzB,GAEPhB,EAAMnB,EAAG,GAAO2D,EAAG3D,EAAG,GACtB0D,EAAMG,EAAQD,GAAG5D,EAAG,GACdyD,GAAK3D,EAAG,GAAI2D,GAAK,GAUtB,IATKA,GAAKtB,GACTqB,EAAKC,GACLA,GAAK,IAELD,EAAKrB,EACLsB,IAAMtB,GAEPnB,EAAMhB,EAAG,GAAOwD,EAAGxD,EAAG,GACtBuD,EAAMG,EAAQD,GAAGzD,EAAG,GACdsD,EAAKxD,EAAG,GAAIwD,EAAK,GAUtB,IATKA,EAAKnB,GACTkB,EAAKC,EACLA,EAAK,IAELD,EAAKlB,EACLmB,GAAMnB,GAEPtB,EAAMb,EAAG,GAAOqD,EAAGrD,EAAG,GACtBoD,EAAMG,EAAQD,EAAGtD,EAAG,GACdmD,EAAKrD,EAAG,GAAIqD,EAAK,GAUtB,IATKA,EAAKhB,GACTe,EAAKC,EACLA,EAAK,IAELD,EAAKf,EACLgB,GAAMhB,GAEPzB,EAAMV,EAAG,GAAOkD,EAAGlD,EAAG,GACtBiD,EAAMG,EAAQD,EAAGnD,EAAG,GACdgD,EAAKlD,EAAG,GAAIkD,EAAK,GAUtB,IATKA,EAAKb,GACTY,EAAKC,EACLA,EAAK,IAELD,EAAKZ,EACLa,GAAMb,GAEP5B,EAAMP,EAAG,GAAO+C,EAAG/C,EAAG,GACtB8C,EAAMG,EAAQD,EAAGhD,EAAG,GACdyC,EAAK3C,EAAG,GAAI2C,EAAK,GAUtB,IATKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEP/B,EAAMJ,EAAG,GAAOsC,EAAGtC,EAAG,GACtBoC,EAAMU,EAAQL,EAAGzC,EAAG,GACdwC,EAAK1C,EAAG,GAAI0C,EAAK,GAetB,IAdKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGP1C,EAAK2C,EAAQI,EAAGxC,EAAG,GAGnBH,EAAMG,EAAG,GAAOqC,EAAGrC,EAAG,GAGhB2B,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKyC,EAAIzC,IAAO,CAC7B,IAAML,EAAK,EAAGA,EAAKqC,EAAIrC,IAAO,CAC7B,IAAMP,EAAK,EAAGA,EAAK2C,EAAI3C,IAAO,CAC7B,GAAKJ,EAAMG,KAASN,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAERxC,GAAMF,CACN,CACDE,GAAMI,CACN,CACDJ,GAAMW,CACN,CACDX,GAAMc,CACN,CACDd,GAAMiB,CACN,CACDjB,GAAMoB,CACN,CACDpB,GAAMuB,CACN,CACDvB,GAAM0B,CACN,CACD1B,GAAM6B,CACN,CACD7B,GAAMgC,CACN,CAWX,OAAO,CACR,G5DzII+C,EAAWvF,EAASwF,OAAS,EA6DjC,SAASC,EAAUC,GAClB,IAAIC,EACAzF,EACA0F,EACAC,EACAC,EACAC,EACAC,EACAjF,EACAuC,EACA2C,EACAhG,EACAiG,EACAC,EAaJ,GAVAlG,EAAImG,EAAgBV,EAAQ,IAC5BxF,EAAQkG,EAAgBV,EAAQ,IAGhCE,GADAE,EAAM7F,EAAES,OACI8E,OAGZtF,EAAQA,EAAM0C,UAAW,GAAK1C,EAAMC,KAAMD,EAAME,QAG3CiG,EAAgBpG,EAAEE,MAAS,CAC/B,IAAMmG,EAAWpG,GAChB,OAAO,EAERD,EAAEE,KAAOoG,EAAoBtG,EAAEE,KAAM,GACrCF,EAAEuG,kBAAmB,CACrB,MAAM,GAAKC,EAAgBxG,EAAEE,MAAS,CACtC,IAAMuG,EAAexG,GACpB,OAAO,EAGRA,EAAQ,CACP6C,GAAM4D,EAAMzG,GACZ8C,GAAM4D,EAAM1G,IAEbD,EAAEE,KAAO0G,EAAoB5G,EAAEE,KAAM,GACrCF,EAAEuG,kBAAmB,EACrBvG,EAAEU,QAAUmG,EAAOlB,EAAO,EAAG3F,EAAEU,QAAS,GACxCV,EAAEG,QAAU,EACZuF,GAAU,CACV,CAED,GAAe,IAAVC,EACJ,OAAK3F,EAAEuG,iBACC7D,EAAmBiD,GAAS3F,EAAGC,GAElCyF,EACG7C,EAAkB8C,GAAS3F,EAAGC,GAE/BF,EAAU4F,GAAS3F,EAAGC,GAK9B,IAFA8F,EAAM,EACNC,EAAK,EACCE,EAAI,EAAGA,EAAIP,EAAOO,IAIvBH,GAHAE,EAAIJ,EAAKK,GAME,IAAND,IACJD,GAAM,GAIR,GAAa,IAARD,EACJ,OAAO,EAGR,GAAe,IAAVJ,EACJ,OAAK3F,EAAEuG,iBACC7D,EAAmBiD,GAAS3F,EAAGC,GAElCyF,EACG7C,EAAkB8C,GAAS3F,EAAGC,GAE/BF,EAAU4F,GAAS3F,EAAGC,GAK9B,GAHAa,EAAKd,EAAEU,QAGFsF,IAAOL,EAAM,EAAI,CAErB,IAAMO,EAAI,EAAGA,EAAIP,GACE,IAAbE,EAAKK,GADaA,KAOxB,OAFAlG,EAAES,MAAQ,CAAEoF,EAAIK,IAChBlG,EAAEU,QAAU,CAAEI,EAAGoF,IACZlG,EAAEuG,iBACC7D,EAAmB,GAAK1C,EAAGC,GAE9ByF,EACG7C,EAAkB,GAAK7C,EAAGC,GAE3BF,EAAU,GAAKC,EAAGC,EACzB,CAID,GAAa,KAHb6F,EAAMgB,EAAgBhG,IAGL,CAKhB,GAAKiF,KAHLH,EAAOmB,EAAuBlB,EAAK/E,EAAId,EAAEG,SAGrB,GAAGyF,EAAK,GAAG,GAASF,GAAe,EAAJK,GAAYH,EAAK,GAAGA,EAAK,GAAG,EAU9E,OAPCvC,EADY,IAARyC,EACCF,EAAM,GAENA,EAAM,GAEZ5F,EAAES,MAAQ,CAAEsF,GACZ/F,EAAEU,QAAU,CAAE,EAAkB,EAAJoF,EAAQA,GACpC9F,EAAEG,OAASkD,EACNrD,EAAEuG,iBACC7D,EAAmB,GAAK1C,EAAGC,GAE9ByF,EACG7C,EAAkB,GAAK7C,EAAGC,GAE3BF,EAAU,GAAKC,EAAGC,GAK1B,GAAK0F,GAASL,EAEb,OAAKtF,EAAEuG,iBACC7D,EAAmBiD,GAAS3F,EAAGC,GAElCyF,EACG7C,EAAkB8C,GAAS3F,EAAGC,GAE/BF,EAAU4F,GAAS3F,EAAGC,EAG9B,CAID,OAAK0F,GAASL,EACRtF,EAAEuG,iBACCnB,EAA2BO,EAAM,GAAK3F,EAAGC,GAE5CyF,EACGL,EAA0BM,EAAM,GAAK3F,EAAGC,GAEzC+C,EAAkB2C,EAAM,GAAK3F,EAAGC,GAGnCD,EAAEuG,iBHvTR,SAAqBvG,EAAGC,GACvB,IAAIG,EACA4G,EACAjB,EACAnD,EACAhC,EACAE,EACAuC,EAEA6C,EAuBJ,IArBAtF,EAAKZ,EAAES,MAGPsF,EAAMkB,EAAOrG,GAGbR,EAAOJ,EAAEE,KAGTY,EAAKd,EAAEU,QAGP2C,EAAKrD,EAAEG,OAGP6G,EAAOhH,EAAEiB,MAGT2B,EAAM5C,EAAE2C,UAAW,GAGbuD,EAAI,EAAGA,EAAIH,EAAKG,IAErB,GAAKtD,EAAKxC,EADL8G,EAAWtG,EAAIE,EAAIuC,EAAI2D,EAAMd,EAAGpG,MACZG,EACxB,OAAO,EAGT,OAAO,CACR,CGiRSkH,CAAoBnH,EAAGC,GAE1ByF,EFrTN,SAAqB1F,EAAGC,GACvB,IAAIG,EACA4G,EACAjB,EACAnF,EACAE,EACAuC,EACA9C,EACA2F,EAoBJ,IAlBAtF,EAAKZ,EAAES,MAGPsF,EAAMkB,EAAOrG,GAGbR,EAAOJ,EAAEE,KAGTY,EAAKd,EAAEU,QAGP2C,EAAKrD,EAAEG,OAGP6G,EAAOhH,EAAEiB,MAGHiF,EAAI,EAAGA,EAAIH,EAAKG,IAErB,GAAK9F,EADLG,EAAK2G,EAAWtG,EAAIE,EAAIuC,EAAI2D,EAAMd,EAAGpG,MACjBG,EAAM6C,IAAM1C,EAAMG,EAAG,KAAQN,EAAM8C,GACtD,OAAO,EAGT,OAAO,CACR,CEmRSqE,CAAmBpH,EAAGC,GD9T/B,SAAqBD,EAAGC,GACvB,IAAIG,EACA4G,EACAjB,EACAnF,EACAE,EACAuC,EAEA6C,EAoBJ,IAlBAtF,EAAKZ,EAAES,MAGPsF,EAAMkB,EAAOrG,GAGbR,EAAOJ,EAAEE,KAGTY,EAAKd,EAAEU,QAGP2C,EAAKrD,EAAEG,OAGP6G,EAAOhH,EAAEiB,MAGHiF,EAAI,EAAGA,EAAIH,EAAKG,IAErB,GAAK9F,EADA8G,EAAWtG,EAAIE,EAAIuC,EAAI2D,EAAMd,EAAGpG,MACjBG,EACnB,OAAO,EAGT,OAAO,CACR,CC6RQoH,CAAYrH,EAAGC,EACvB"}